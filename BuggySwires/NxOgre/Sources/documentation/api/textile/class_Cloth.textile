p(d). Cloth is an instance of a **Mesh** containg a Cloth.

p. Generally speaking a Cloth is "rendered" through a RenderSystem which
may or may not have a specific function for creating and setting up
the cloth for you -- You should refer to that.


h2(fn destructor). <a name='Cloth'></a>Cloth

h3(t). Traits

* Private function.


h2(fn function). <a name='addDirectedForceAtPos'></a>addDirectedForceAtPos

p(d). Applies a radial force (or impulse) at a particular position. All vertices
within radius will be affected with a quadratic drop-off.

p. Because forces are reset at the end of every timestep, you can maintain
a total external force on an object by calling this once every frame.

p. Enums::ForceMode determines if the force is to be conventional or impulsive.



p(n). **Note** -- Supported modes are ForceMode_Force, ForceMode_Impulse, ForceMode_Acceleration, ForceMode_Velocity)


h3. Arguments

|_. Argument|_. Description|
|const Vec3& __position__ | Position to apply force at.|
|const Vec3& __force__ | Force/impulse to add, defined in the global frame.|
|Real __magnitude__ | Magnitude of the force/impulse to apply.|
|Real __radius__ | The sphere radius in which particles will be affected. <b>Range:</b> position vector|
|Enums::ForceMode __mode__ | mode The mode to use when applying the force/impulse. Default: Enums::ForceMode_Force|
||


h2(fn function). <a name='addForceAtPos'></a>addForceAtPos

p(d). Applies a radial force (or impulse) at a particular position. All vertices
within radius will be affected with a quadratic drop-off.

p. Because forces are reset at the end of every timestep, you can maintain
a total external force on an object by calling this once every frame.

p. Enums::ForceMode determines if the force is to be conventional or impulsive.



p(n). **Note** -- Supported modes are ForceMode_Force, ForceMode_Impulse, ForceMode_Acceleration, ForceMode_Velocity)


h3. Arguments

|_. Argument|_. Description|
|const Vec3& __position__ | Position to apply force at.|
|Real __magnitude__ | Magnitude of the force/impulse to apply.|
|Real __radius__ | The sphere radius in which particles will be affected. <b>Range:</b> position vector|
|Enums::ForceMode __mode__ | mode The mode to use when applying the force/impulse. Default: Enums::ForceMode_Force|
||


h2(fn function). <a name='addForceAtVertex'></a>addForceAtVertex

p(d). Applies a force (or impulse) defined in the global coordinate frame, to a particular
vertex of the cloth.

p. Because forces are reset at the end of every timestep, you can maintain
a total external force on an object by calling this once every frame.

p. Enums::ForceMode determines if the force is to be conventional or impulsive.



p(n). **Note** -- Supported modes are ForceMode_Force, ForceMode_Impulse, ForceMode_Acceleration, ForceMode_Velocity)


h3. Arguments

|_. Argument|_. Description|
|const Vec3& __force__ | Force/impulse to add, defined in the global frame.|
|unsigned int __vertexId__ | Number of the vertex to add the force at.|
|Enums::ForceMode __mode__ | mode The mode to use when applying the force/impulse. Default: Enums::ForceMode_Force|
||


h2(fn advanc). <a name='advance'></a>advance

p(d). Time advancing function, called by TimeController


h3. Arguments

|_. Argument|_. Description|
|float __deltaTime__ | Time passed|
|const Enums::Priority& priority | Priority of the cloth|


h3(t). Traits

* Private function.


h2(fn function). <a name='attachToCollidingShapes'></a>attachToCollidingShapes

p(d). Attaches the cloth to all shapes, currently colliding.


p(n). **Note** -- Cube, Sphere, Capsule and Convex are only valid shapes to attach to.


h3. Arguments

|_. Argument|_. Description|
|unsigned int __attachmentFlags__ | Attachment flags|


h3(e). Example

bc..    cloth->attachToCollidingShapes(Enums::ClothAttachmentFlags_Twoway);
   Enums::ClothAttachmentFlags


p. &nbsp;

h2(fn function). <a name='attachToCore'></a>attachToCore

p(d). After this call, the cloth is infinitely stiff between collisions and simply
moves with the actor. At impacts with an impact impulse greater than impulseThreshold,
the cloth is plastically deformed. Thus, a cloth with a core behaves like a piece of metal.

p. The core actor's geometry is adjusted automatically. Its size also depends on the
cloth thickness. Thus, it is recommended to choose small values for the thickness.
At impacts, colliding objects are moved closer to the cloth by the value provided in
penetrationDepth which causes a more dramatic collision result.

p. The core actor must have at least one shape, and currently supported shapes are
spheres, capsules, boxes and compounds of spheres.
It is recommended to specify the density rather than the mass of the core body.
This way the mass and inertia tensor are updated when the core deforms.

p. The maximal deviation of cloth particles from their initial positions
(modulo the global rigid body transforms translation and rotation) can be
specified via the parameter maxDeformationDistance. Setting this parameter to
zero means that the deformation is not limited.



p(n). **Note** -- * Call this function only once right after the cloth is created. Turning cloth into metal and vice versa during the simulation is not recommended.
* This feature is well suited for volumetric objects like barrels. It cannot handle two dimensional flat pieces well.


h3. Arguments

|_. Argument|_. Description|
|RigidBody* __rigidBody__ | The core actor to attach the cloth to.|
|Real __impulseThreshold__ | Threshold for when deformation is allowed.|
|Real __penetrationDepth__ | Amount by which colliding objects are brought closer to the cloth.|
|Real __maxDeformationDistance__ | Maximum deviation of cloth particles from initial position.|
||


h2(fn function). <a name='attachToShape'></a>attachToShape

p(d). Attaches the cloth to a shape. All cloth points currently inside the shape are attached.


p(n). **Note** -- Cube, Sphere, Capsule and Convex are only valid shapes to attach to.


h3. Arguments

|_. Argument|_. Description|
|Shape* __shape__ | Shape for which the cloth to be attached to.|
|unsigned int __attachmentFlags__ | Attachment flags|


h3(e). Example

bc..    cloth->attachToShape(box_shape, Enums::ClothAttachmentFlags_Twoway | ClothAttachmentFlags_Tearable);
   Enums::ClothAttachmentFlags


p. &nbsp;

h2(fn function). <a name='attachVertexToGlobalPosition'></a>attachVertexToGlobalPosition

p(d). Attaches a cloth vertex to a position in world space


h3. Arguments

|_. Argument|_. Description|
|unsigned int __vertexID__ | Vertex ID to attach|
|const Vec3& __globalPos__ | Global position in world space.|


h3(e). Example

bc..    cloth->attachVertexToGlobalPosition(33, Vec3(0, 10, 0));


p. &nbsp;

h2(fn function). <a name='attachVertexToShape'></a>attachVertexToShape

p(d). Attaches a cloth vertex to a local position within a shape.


p(n). **Note** -- Cube, Sphere, Capsule and Convex are only valid shapes to attach to.


h3. Arguments

|_. Argument|_. Description|
|unsigned int __vertexID__ | Vertex ID to attach|
|Shape* __shape__ | Shape to attach the verex to|
|const Vec3& __localPos__ | Local position relative to the pose of the shape|
|unsigned int __attachmentFlags__ | Attachment flags|


h3(e). Example

bc..    cloth->attachVertexToShape(33, box_shape, Vec3(0, 1, 0), Enums::ClothAttachmentFlags_Twoway | ClothAttachmentFlags_Tearable);
   Enums::ClothAttachmentFlags


p. &nbsp;

h2(fn function). <a name='detachFromShape'></a>detachFromShape

p(d). Detaches the cloth from a shape it has been attached to before.


h3. Arguments

|_. Argument|_. Description|
|Shape* __shape__ | Shape to detach the cloth from.|


h2(fn function). <a name='dominateVertex'></a>dominateVertex

p(d). Changes the weight of a vertex in the cloth solver for a period of time.

p. If this method is called for some vertex, the cloth solver will, during a time
period of length expirationTime, assign a different weight to the vertex
while internal cloth constraints (i.e. bending & stretching) are being resolved.

p. With a high dominanceWeight, the modified vertex will force neighboring vertices
to strongly accommodate their positions while its own is kept fairly constant.
The reverse holds for smaller dominanceWeights.

p. Using a dominanceWeight of +infinity has a similar effect as temporarily attaching
the vertex to a global position. However, unlike using attachments, the velocity
of the vertex is kept intact when using this method.



p(n). **Note** -- * The current implementation will not support the full range of dominanceWeights. All dominanceWeights > 0.0 are treated equally as being +infinity.
* An expiration time of 0.0 is legal and will result in dominance being applied throughout one substep before being discarded immediately.
* Having a large number of vertices dominant at once may result in a performance penalty.



h3. Arguments

|_. Argument|_. Description|
|unsigned int __vertexId__ | Index of the vertex|
|Real __expirationTime__ | Time period where dominance will be active for this vertex.|
|Real __dominanceWeight__ | Dominance weight for this vertex.|


h2(fn function). <a name='freeVertex'></a>freeVertex

p(d). Frees a previously attached cloth point.


h3. Arguments

|_. Argument|_. Description|
|unsigned int __vertexId__ | Vertex to free|


h2(fn function). <a name='getAttachmentResponseCoefficient'></a>getAttachmentResponseCoefficient

p(d). Gets the attachment response coefficient


h3. Return

p(r). **Real** -- Response coefficient.


h2(fn function). <a name='getAttachmentTearFactor'></a>getAttachmentTearFactor

p(d). Retrieves the attachment cloth tear factor.


h3. Arguments

|_. Argument|_. Description|
|**Real** | attachment tear factor.|


h3(s). See

p(s). Cloth::setAttachmentTearFactor

h2(fn function). <a name='getBendingStiffness'></a>getBendingStiffness

p(d). Gets the cloth bending stiffness.


h3. Return

p(r). Bending stiffness of the Cloth


h3(s). See

p(s). Cloth::setBendingStiffness

h2(fn function). <a name='getCollisionResponseCoefficient'></a>getCollisionResponseCoefficient

p(d). Retrieves the collision response coefficient.


h3. Return

p(r). **Real** -- response coefficient


h2(fn function). <a name='getDampingCoefficient'></a>getDampingCoefficient

p(d). Gets the damping coefficient.


h3. Return

p(r). **Real** -- Damping coefficient


h2(fn function). <a name='getDensity'></a>getDensity

p(d). Gets the cloth density.


h3. Return

p(r). **Real** -- Cloth density.


h2(fn function). <a name='getExternalAcceleration'></a>getExternalAcceleration

p(d). Retrieves the external acceleration which affects all non attached particles of the cloth.


h3. Return

p(r). **Vec3** -- Acceleration vector (@unit length / s^2@).


h2(fn function). <a name='getFlags'></a>getFlags

p(d). Retrieves the flags.


h3. Return

p(r). **unsigned int** -- The cloth flags.


h2(fn function). <a name='getForceFieldMaterial'></a>getForceFieldMaterial

p(d). Retrieves the actor's force field material index


h3. Return

p(r). **MaterialIdentifier** -- Forcefield material.


h2(fn function). <a name='getFriction'></a>getFriction

p(d). Gets the cloth friction coefficient.


h3. Return

p(r). **Real** -- Friction coefficient


h3(s). See

p(s). Cloth::setFriction

h2(fn function). <a name='getFromFluidResponseCoefficient'></a>getFromFluidResponseCoefficient

p(d). Gets the response coefficient for collisions from fluids to this cloth


h3. Return

p(r). **Real** -- Response coefficient.


h2(fn function). <a name='getGroup'></a>getGroup

p(d). Gets the collision group the cloth belongs to.


h3. Return

p(r). **GroupIdentifier** -- Collision group for the cloth


h2(fn function). <a name='getGroupsMask'></a>getGroupsMask

p(d). Gets the collision mask for filtering


h3. Return

p(r). **int4** -- The group mask for the cloth.


h2(fn function). <a name='getMesh'></a>getMesh

p(d). Get the mesh that the cloth is using.


p(n). **Note** -- This mesh is owned by the MeshManager, and may be shared by other cloths, do
not delete the pointer or change the mesh.


h3. Return

p(r). **Mesh** * -- Mesh that the cloth is using.


h3(s). See

p(s). Mesh

h2(fn function). <a name='getMinAdhereVelocity'></a>getMinAdhereVelocity

p(d). If the Enums::ClothFlags_Adhere flag is set the cloth moves partially in the frame of the attached rigid body.

p. This feature is useful when the cloth is attached to a fast moving character.
In that case the cloth adheres to the shape it is attached to while only
velocities below the parameter minAdhereVelocity are used for secondary effects.


h3. Return

p(r). **Real** -- The minimal velocity for cloth to adhere (@unit length / s@)


h3(s). See

p(s). Cloth::setMinAdhereVelocity

h2(fn function). <a name='getName'></a>getName

p(d). Get the name of the cloth or BLANK_STRING


h3. Return

p(r). **String** -- The name of the cloth.


h2(fn function). <a name='getNumberOfParticles'></a>getNumberOfParticles

p(d). Gets the number of cloth particles.


h3. Return

p(r). **unsigned int** -- The number of particles in the cloth.


h2(fn function). <a name='getPPUTime'></a>getPPUTime

p(d). Get the PPU simulation time.


h3. Return

p(r). **unsigned int** -- Simulation time.


h2(fn function). <a name='getPhysXCloth'></a>getPhysXCloth

p(d). Get the NxCloth instance.


h3. Return

p(r). **NxCloth** * -- NxCloth instance of this Cloth.


h3(t). Traits

* Use PhysX classes as arguments or as a return value


h2(fn function). <a name='getPhysXMeshData'></a>getPhysXMeshData

p(d). Get the PhysXMeshData instance.


p(n). **Note** -- This mesh is owned by the Cloth; do not delete the pointer.


h3. Return

p(r). **PhysXMeshData** * -- PhysXMeshData used by the cloth.


h3(s). See

p(s). PhysXMeshData

h2(fn function). <a name='getPosition'></a>getPosition

p(d). Gets the position of a particular vertex of the cloth.


h3. Arguments

|_. Argument|_. Description|
|unsigned int __vertexId__ | Index of the vertex|


h3. Return

p(r). **Vec3** -- The vertex position.


h2(fn function). <a name='getPositions'></a>getPositions

p(d). Get the position for _all_ of the particles at once.


h3. Arguments

|_. Argument|_. Description|
|Buffer<Vec3>& __outPositions__ | Returns all the positions of the vertices as a Buffer of Vec3s.|


h2(fn function). <a name='getPressure'></a>getPressure

p(d). Retrieves the cloth pressure coefficient.


h3. Return

p(r). **Real** -- Pressure coefficient


h2(fn function). <a name='getRelativeGridSpacing'></a>getRelativeGridSpacing

p(d). The cloth is represented by a set of world aligned cubical
cells in broad phase. The size of these cells is determined
by multiplying the length of the diagonal of the AABB of the
initial cloth size with this constant.


h3. Return

p(r). **Real** -- Relative grid spacing


h2(fn function). <a name='getRenderable'></a>getRenderable

p(d). Get the renderable that the cloth is rendering to.


h3. Return

p(r). **Renderable** * -- The renderable the cloth is rendering to.


h3(s). See

p(s). Renderable

h2(fn function). <a name='getScene'></a>getScene

p(d). Retrieves the scene which this cloth belongs to.


h3. Return

p(r). **Scene** * -- The scene that the cloth belongs to.


h2(fn functions). <a name='getSleepLinearVelocity'></a>getSleepLinearVelocity

p(d). Returns the linear velocity below which a cloth may go to sleep.


h3. Return

p(r). **Real** -- The linear velocity threshold of when the cloth will go to sleep.


h2(fn function). <a name='getSolverIterations'></a>getSolverIterations

p(d). Retrieves the cloth solver iterations.


h3. Return

p(r). **unsigned int** -- Cloth solver iterations
Cloth::getSolverIterations


h2(fn function). <a name='getStretchingStiffness'></a>getStretchingStiffness

p(d). Gets the cloth stretching stiffness.


h3. Return

p(r). **Real** -- Stretching stiffness


h3(s). See

p(s). Cloth::getStretchingStiffness

h2(fn function). <a name='getTearFactor'></a>getTearFactor

p(d). Retrieves the cloth tear factor.


h3. Return

p(r). **Real** -- Tear factor.


h2(fn function). <a name='getThickness'></a>getThickness

p(d). Gets the cloth thickness.


h3. Return

p(r). **Real** -- Cloth thickness


h3(s). See

p(s). Cloth::setThickness

h2(fn function). <a name='getToFluidResponseCoefficient'></a>getToFluidResponseCoefficient

p(d). Retrieves response coefficient for collisions from this cloth to fluids.


h3. Return

p(r). **Real** -- response coefficient


h2(fn functions). <a name='getValidBounds'></a>getValidBounds

p(d). Gets the valid bounds.


h3. Return

p(r). **Bounds3** -- The bounds.


h2(fn function). <a name='getVelocities'></a>getVelocities

p(d). Get the velocities for _all_ of the particles at once.


h3. Arguments

|_. Argument|_. Description|
|Buffer<Vec3>& __outVelocities__ | Returns all the velocities of the vertices as a Buffer of Vec3s.|


h2(fn function). <a name='getVelocity'></a>getVelocity

p(d). Gets the velocity of a particular vertex of the cloth.


h3. Arguments

|_. Argument|_. Description|
|unsigned int __vertexId__ | Vertex index to apply the velocity to.|


h3. Return

p(r). Vec3 -- Velocity of the vertex


h2(fn function). <a name='getVertexAttachmentPosition'></a>getVertexAttachmentPosition

p(d). Return the attachment position of the given vertex.


h3. Arguments

|_. Argument|_. Description|
|unsigned int __vertexId__ | Index of the vertex.|


h3. Return

p(r). **Vec3** -- Attachment position.


h2(fn function). <a name='getVertexAttachmentShape'></a>getVertexAttachmentShape

p(d). Returns the pointer to an attached shape pointer of the given vertex.


h3. Arguments

|_. Argument|_. Description|
|unsigned int __vertexId__ | Index of the vertex.|


h3. Return

p(r). **Shape** * -- Attachment status.


h2(fn function). <a name='getVertexAttachmentStatus'></a>getVertexAttachmentStatus

p(d). Return the attachment status of the given vertex.


h3. Arguments

|_. Argument|_. Description|
|unsigned int __vertexId__ | Index of the vertex.|


h3. Return

p(r). **Enums::ClothVertexAttachmentStatus** -- Attachment status.


h2(fn function). <a name='getWindAcceleration'></a>getWindAcceleration

p(d). Retrieves the acceleration acting normal to the cloth surface at each vertex.


h3. Return

p(r). **Vec3** -- The acceleration vector (@unit length / s^2@)


h2(fn function). <a name='getWorldBounds'></a>getWorldBounds

p(d). Returns a world space AABB enclosing all cloth points.


h3. Return

p(r). **Bounds3** -- World bounds


h2(fn functions). <a name='isSleeping'></a>isSleeping

p(d). Is the cloth sleeping?


h3. Return

p(r). **bool** -- Returns true if this cloth is sleeping.


h2(fn function). <a name='overlapAABBTriangles'></a>overlapAABBTriangles

p(d). Finds triangles touching the input bounds.


p(n). **Note** -- This method returns a pointer to an internal structure using the indices member. Hence theuser should use or copy the indices before calling any other API function.


h3. Arguments

|_. Argument|_. Description|
|const Bounds3& __bounds__ | Bounds to test against in world space.|
|unsigned int __nbIndices__ | Retrieves the number of triangle indices touching the AABB|
|const unsigned int*& __indicies__ | Returns an array of touching triangle indices.|


h3. Return

p(r). **bool** -- True if there is an overlap.


h2(fn function). <a name='putToSleep'></a>putToSleep

p(d). Forces the cloth to sleep.


h2(fn function). <a name='raycast'></a>raycast

p(d). Executes a raycast against the cloth.


h3. Arguments

|_. Argument|_. Description|
|const Ray& ray | The ray in world space.|


h3. Return

p(r). **ClothRaycastHit** -- Hit position and index to the vertex hit by the ray.


h2(fn function). <a name='setAttachmentResponseCoefficient'></a>setAttachmentResponseCoefficient

p(d). Sets the attachment response coefficient


h3. Arguments

|_. Argument|_. Description|
|Real __coefficient__ | Response coefficient; [0, 1].|


h2(fn function). <a name='setAttachmentTearFactor'></a>setAttachmentTearFactor

p(d). Sets the cloth attachment tear factor


h3. Arguments

|_. Argument|_. Description|
|Real __factor__ | attachment tear factor; (1, inf).|


h3(s). See

p(s). Cloth::getAttachmentTearFactor

h2(fn function). <a name='setBendingStiffness'></a>setBendingStiffness

p(d). Sets the cloth bending stiffness.


h3. Arguments

|_. Argument|_. Description|
|Real __stiffness__ | Bending stiffness; [0, 1].|


h3(s). See

p(s). Cloth::getBendingStiffness

h2(fn function). <a name='setCollisionResponseCoefficient'></a>setCollisionResponseCoefficient

p(d). Sets the collision response coefficient.


h3. Arguments

|_. Argument|_. Description|
|Real __coefficient__ | Collision response coefficient|


h2(fn function). <a name='setDampingCoefficient'></a>setDampingCoefficient

p(d). Sets the damping coefficient.


h3. Arguments

|_. Argument|_. Description|
|Real __damping__ | Damping coefficent; [0..1].|


h2(fn function). <a name='setExternalAcceleration'></a>setExternalAcceleration

p(d). Sets an external acceleration (@unit length / s^2@) which affects all non attached particles of the cloth


h3. Arguments

|_. Argument|_. Description|
|const Vec3& __acceleration__ | The acceleration vector.|


h2(fn function). <a name='setFlags'></a>setFlags

p(d). Sets the flags, a combination of the bits defined by the enum Enums::ClothFlags.


h3. Arguments

|_. Argument|_. Description|
|unsigned int __flags__ | Combination of the Enums::ClothFlags using the @|@ operator.|


h2(fn function). <a name='setForceFieldMaterial'></a>setForceFieldMaterial

p(d). Sets the actor's force field material index


h3. Arguments

|_. Argument|_. Description|
|MaterialIdentifier __material__ | New forcefield material.|


h2(fn function). <a name='setFriction'></a>setFriction

p(d). Sets the cloth friction coefficient.


h3. Arguments

|_. Argument|_. Description|
|Real __friction__ | Friction coefficient; [0 to 1].|


h3(s). See

p(s). Cloth::getFriction

h2(fn function). <a name='setFromFluidResponseCoefficient'></a>setFromFluidResponseCoefficient

p(d). Sets the response coefficient for collisions from fluids to this cloth


h3. Arguments

|_. Argument|_. Description|
|Real __coefficient__ | Response coefficient.|


h2(fn function). <a name='setGroupsMask'></a>setGroupsMask

p(d). Sets 128-bit mask used for collision filtering.


h3. Arguments

|_. Argument|_. Description|
|const int4& __groupsMask__ | The group mask to set for the cloth.|


h2(fn function). <a name='setMinAdhereVelocity'></a>setMinAdhereVelocity

p(d). If the Enums::ClothFlags_Adhere flag is set the cloth moves partially in the frame of the attached rigid body.

p. This feature is useful when the cloth is attached to a fast moving character.
In that case the cloth adheres to the shape it is attached to while only
velocities below the parameter minAdhereVelocity are used for secondary effects.


h3. Arguments

|_. Argument|_. Description|
|Real __velocity__ | The minimal velocity for cloth to adhere (@unit length / s@)|


h3(s). See

p(s). Cloth::getMinAdhereVelocity

h2(fn function). <a name='setName'></a>setName

p(d). Sets a name string for the object that can be retrieved with Cloth::getName()


h3. Arguments

|_. Argument|_. Description|
|const String& __name__ | New name for the Cloth.|


h2(fn function). <a name='setPosition'></a>setPosition

p(d). Sets the position of a particular vertex of the cloth.


h3. Arguments

|_. Argument|_. Description|
|const Vec3& __position__ | New position of the vertex|
|unsigned int __vertexId__ | Index of the vertex|


h2(fn function). <a name='setPositions'></a>setPositions

p(d). Set the position for _all_ of the particles at once.


h3. Arguments

|_. Argument|_. Description|
|Buffer<Vec3>& __positions__ | All the new positions of the vertices as a Buffer of Vec3s.|


h2(fn function). <a name='setPressure'></a>setPressure

p(d). Sets the cloth pressure coefficient.


h3. Arguments

|_. Argument|_. Description|
|Real __pressure__ |  Pressure coefficient; [0, inf).|
|Cloth::getPressure|


h2(fn functions). <a name='setSleepLinearVelocity'></a>setSleepLinearVelocity

p(d). Returns the linear velocity below which a cloth may go to sleep.


h3. Arguments

|_. Argument|_. Description|
|Real __threshold__ | The linear velocity threshold of when the cloth will go to sleep.|


h2(fn function). <a name='setSolverIterations'></a>setSolverIterations

p(d). Sets the cloth solver iterations.


h3. Arguments

|_. Argument|_. Description|
|unsigned int __solverIterations__ | Number of iterations; (0, inf].|
|Cloth::setSolverIterations|


h2(fn function). <a name='setStretchingStiffness'></a>setStretchingStiffness

p(d). Sets the cloth stretching stiffness in the range from 0 to 1.


h3. Arguments

|_. Argument|_. Description|
|Real __stiffness__ | Stretching stiffness; (0, 1].|


h3(s). See

p(s). Cloth::setStretchingStiffness

h2(fn function). <a name='setTearFactor'></a>setTearFactor

p(d). Sets the cloth tear factor.


h3. Arguments

|_. Argument|_. Description|
|Real __factor__ | Tear factor; (1, inf).|


h2(fn function). <a name='setThickness'></a>setThickness

p(d). Sets the cloth thickness.


h3. Arguments

|_. Argument|_. Description|
|Real __thickness__ | Thickness; [0, inf).|


h3(s). See

p(s). Cloth::getThickness

h2(fn function). <a name='setToFluidResponseCoefficient'></a>setToFluidResponseCoefficient

p(d). Sets the response coefficient for collisions from this cloth to fluids


h3. Arguments

|_. Argument|_. Description|
|Real __coefficient__ | response coefficient|


h2(fn functions). <a name='setValidBounds'></a>setValidBounds

p(d). Sets the valid bounds of the cloth in world space.

p. If the flag Enums::ClothFlags_ValidBounds is set, these bounds defines the volume
outside of which cloth particle are automatically removed from the simulation.


h3. Arguments

|_. Argument|_. Description|
|const Bounds3& __bounds__ | Valid bounds.|


h2(fn function). <a name='setVelocities'></a>setVelocities

p(d). Set the velocities of all the vertices at once.


h3. Arguments

|_. Argument|_. Description|
|Buffer<Vec3>& __velocities__ | All the new velocities of the vertices as a Buffer of Vec3s.|


h2(fn function). <a name='setVelocity'></a>setVelocity

p(d). Sets the velocity of a particular vertex of the cloth.


h3. Arguments

|_. Argument|_. Description|
|const Vec3& __velocity__ | New velocity of the vertex|
|unsigned int __vertexId__ | Vertex index to apply the velocity to.|


h2(fn function). <a name='setWindAcceleration'></a>setWindAcceleration

p(d). Sets an acceleration acting normal to the cloth surface at each vertex.


h3. Arguments

|_. Argument|_. Description|
|const Vec3& __acceleration__ | The acceleration vector (@unit length / s^2@)|


h2(fn function). <a name='tearVertex'></a>tearVertex

p(d). First the vertex is duplicated. The triangles on one side of the split plane keep
the original vertex. For all triangles on the opposite side the original vertex is
replaced by the new one. The split plane is defined by the world location of the
vertex and the normal provided by the user.


p(n). **Note** -- * TearVertex performs a user defined vertex split in contrast to an automatic split
that is performed when the flag Enums::ClothAttachmentFlags_Tearable is set.
Therefore, tearVertex works even if Enums::ClothAttachmentFlags_Tearable is not
set in ClothDescription::mFlags.
* For tearVertex to work, the clothMesh has to be cooked with the flag
Enums::ClothAttachmentFlags_Tearable set in NxClothMeshDesc.flags.


h3. Arguments

|_. Argument|_. Description|
|const unsigned int __vertexId__ | Index of the vertex.|
|const Vec3& __normal__ |  The normal of the split plane.|


h3. Return

p(r). **bool** -- True if the split had an effect


h2(fn function). <a name='wakeUp'></a>wakeUp

p(d). Wakes up the cloth if it is sleeping.


h3. Arguments

|_. Argument|_. Description|
|Real __wakeCounterValue__ | New sleep counter value; [0, inf]|


