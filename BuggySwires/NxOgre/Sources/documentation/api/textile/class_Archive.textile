p(d). 
An archive is a collection of resources in one place.

p. It may be implemented as a directory, zip file or even a website.


h2(fn destructor). <a name='Archive'></a>Archive

h3(t). Traits

* Virtual Function


h2(fn function). <a name='close'></a>close

p(d). Close a Resource from this Archive.


h3. Arguments

|_. Argument|_. Description|
|Resource* __resource__ | Resource to close|


h2(fn function). <a name='getName'></a>getName

p(d). Get the name of the Archive.


h3. Return

p(r). **String** -- Name of the Archive


h2(fn function). <a name='getNameHash'></a>getNameHash

p(d). Get the hash of the name of the Archive.


h3. Return

p(r). **StringHash** -- Hash of the name of the Archive


h2(fn function). <a name='getOpenResources'></a>getOpenResources

p(d). Get open resources


h3. Return

p(r). **ResourcesIterator** -- Iterator to the current resources of the archive.


h2(fn function). <a name='getPath'></a>getPath

p(d). Get the path of the Archive.


h3. Return

p(r). **Path** -- Pat of the Archive


h2(fn function). <a name='getProtocol'></a>getProtocol

p(d). Get the **ResourceProtocol** of this Archive


h3. Return

p(r). **ResourceProtocol** -- The ResourceProtocol pointer


h2(fn function). <a name='open'></a>open

p(d). Open a new Resource based on an ArchiveResourceIdentifier, and Resource access permissions.


h3. Arguments

|_. Argument|_. Description|
|const Path& __relativePath__ | Relative Path to the Resource, Relative to the Archive.|
|NxOgre::Enums::ResourceAccess __access__ | Access permissions|


h3. Return

p(r). **Resource** * -- Resource if opened sucessfully, or *NULL* on failure


h3(t). Traits

* Virtual Function


