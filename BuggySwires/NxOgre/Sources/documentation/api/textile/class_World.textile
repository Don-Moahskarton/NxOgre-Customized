p(d). 
World is the main singleton class of NxOgre. Always created first and destroyed last.



h3(e). Example

bc.. #include "NxOgre.h"

class myApp
{
 public:
 
	myApp()
	{
	 mWorld = NxOgre::World::createWorld();
	}

 protected:
	NxOgre::World* mWorld;
};


p. &nbsp;

h2(fn function). <a name='Constructor'></a>Constructor

h3(t). Traits

* Private function.


h3(s). See

p(s). World::createWorld

h2(fn function). <a name='Destructor'></a>Destructor

h3(t). Traits

* Private function.


h3(s). See

p(s). World::destroyWorld

h2(fn function). <a name='createScene'></a>createScene

p(d). Create a single scene with a SceneDescription as it's initial properties.



h3. Arguments

|_. Argument|_. Description|
|const SceneDescription&  = SceneDescription() | SceneDescription to create the Scene with.|
||


h3. Return

p(r). Scene* -- The Scene, or NULL if the Scene was not created properly.

h3(e). Example

bc..   Scene* scene = World::getWorld()->createScene();



p. &nbsp;

h2(fn function). <a name='createWorld'></a>createWorld

p(d). Create the World instance, and Singletons (if they aren't created).



p(n). **Note** -- If null is returned then you should check the log for the reason why it wasn't created.


h3. Arguments

|_. Argument|_. Description|
|WorldPrototype* _prototype_ | Prototype to create from.|
||


h3. Return

p(r). World* -- The World instance, or NULL if created.

h3(e). Example

bc..   WorldPrototype* prototype = ...
  World* world = World::createWorld(prototype);



p. &nbsp;

h2(fn function). <a name='destroyScene'></a>destroyScene

p(d). Destroys a single scene and the contents within.



h3. Arguments

|_. Argument|_. Description|
|Scene* | The Scene to destroy|


h2(fn function). <a name='destroySingletons'></a>destroySingletons

p(d). Destroy singletons. This should be called AFTER destroyWorld.



h3(e). Example

bc..   NxOgre::ResourceSystem::getSingleton(); // != 0
  NxOgre::World::precreateSingletons();
  NxOgre::ResourceSystem::getSingleton(); // == 0


p. &nbsp;

h2(fn function). <a name='destroyWorld'></a>destroyWorld

p(d). Destroyer of World, Scenes and everything within.


p(n). **Note** -- If you destroy the singletons, then World::destroySingletons does not need to be called.#


h3. Arguments

|_. Argument|_. Description|
|bool _also_destroy_singletons_ | Destroy the Singletons along with the world.|


h2(fn function). <a name='getNullCallback'></a>getNullCallback

p(d). Get a copy of the Null Callback. Used for parts of NxOgre that don't have a user callback but still recieve events.


p(n). **Note** -- This OWNED by NxOgre. Do not delete it.

h3. Return

p(r). Callback* -- The callback

h2(fn function). <a name='getPhysXCookingInterface'></a>getPhysXCookingInterface

p(d). Get a copy of the NxCookingInterface pointer.


p(n). **Note** -- This OWNED by NxOgre. Do not delete it.

h3. Return

p(r). NxCookingInterface* -- The NxCookingInterface pointer

h3(t). Traits

* Use PhysX classes as arguments or as a return value


h2(fn function). <a name='getPhysXSDK'></a>getPhysXSDK

p(d). Get a copy of the NxPhysicsSDK pointer.


p(n). **Note** -- This OWNED by NxOgre. Do not delete it.

h3. Return

p(r). NxPhysicsSDK* -- The NxPhysicsSDK pointer

h3(t). Traits

* Use PhysX classes as arguments or as a return value


h2(fn function). <a name='getRemoteDebugger'></a>getRemoteDebugger

p(d). Get a copy of the RemoteDebugger pointer.


p(n). **Note** -- This OWNED by NxOgre. Do not delete it.

h3. Return

p(r). RemoteDebugger* -- The RemoteDebugger

h2(fn function). <a name='getScenes'></a>getScenes

p(d). Get an iterator to the current Scenes in World.


h3. Return

p(r). SceneIterator* -- A iterator to the Scenes.

h2(fn function). <a name='getVisualDebugger'></a>getVisualDebugger

p(d). Get a copy of the VisualDebugger pointer.


p(n). **Note** -- This OWNED by NxOgre. Do not delete it.

h3. Return

p(r). VisualDebugger* -- The VisualDebugger

h2(fn function). <a name='getWorld'></a>getWorld

p(d). Get a copy of the World pointer.



h3. Return

p(r). World* -- The World instance, or NULL if the World has not been created yet.

h2(fn function). <a name='hasHardware'></a>hasHardware

p(d). Does the current computer have a PhysX accelerator, or a GPU capable of PhysX acceleration?



h3. Return

p(r). bool -- If the hardware has a PhysX accelerator or capable GPU.

h2(fn function). <a name='isDead'></a>isDead

p(d). Is the associated NxPhysicsSDK not created, or a serious error has happened that has made it unusable.



h3. Return

p(r). bool -- If the NxPhysicsSDK is not created or a critical error has happened.

h2(fn function). <a name='precreateSingletons'></a>precreateSingletons

p(d). Pre-create singletons of NxOgre (ResourceSystem, MeshManager, HeightFieldManager, ErrorStream, etc.)



h3(e). Example

bc..    NxOgre::ResourceSystem::getSingleton(); // == 0
   NxOgre::World::precreateSingletons();
   NxOgre::ResourceSystem::getSingleton(); // != 0


p. &nbsp;

