p(d). Represents a abstract NxActor class; Actors, SceneGeometries, KinematicActors, Volumes and classes that inherit from
these are all RigidBodies. All raycasting, sweeping, and other testing functions refer to NxActors as RigidBodies.

To differentiate between RigidBodies (to re-cast them), use the RigidBody::getType() function, which returns a specific
class code. User classes may also use this coding system to help differentiating between their classes and NxOgre's.


h2(fn function). <a name='GetShapes'></a>GetShapes

p(d). Get a iterator to the current shapes in this RigidBody.


h3. Return

p(r). **CollisionModelIterator** -- Iterator to the shapes.


h2(fn destructor). <a name='RigidBody'></a>RigidBody

p(d). RigidBody destructor


h3(t). Traits

* Virtual Function


h2(fn function). <a name='createDynamic.0'></a>createDynamic.0

p(d). Become a Dynamic RigidBody (Actors) based on the arguments.


p(n). **Note** -- User classes that inherit from Actor do not need to call this.


h3. Arguments

|_. Argument|_. Description|
|const Matrix44& __pose__ | Pose of where the Dynamic RigidBody should be.|
|const RigidBodyDescription& __description__ | Additional properties of the RigidBody.|
|Scene* __scene__ | Which scene the RigidBody to exist in. Cannot be NULL.|
|Shape* __shape__ | The Single shape for the RigidBody to use. Cannot be NULL.|


h3(t). Traits

* Protected function.


h2(fn function). <a name='createDynamic.1'></a>createDynamic.1

p(d). Become a Dynamic RigidBody (Actor) based on the arguments.


p(n). **Note** -- User classes that inherit from Actor do not need to call this.


h3. Arguments

|_. Argument|_. Description|
|const Matrix44& __pose__ | Pose of where the Dynamic RigidBody should be.|
|const RigidBodyDescription& __description__ | Additional properties of the RigidBody.|
|Scene* __scene__ | Which scene the RigidBody to exist in. Cannot be NULL.|
|Shape& __shapes__ | The multiple shapes for the RigidBody to use. Cannot be empty.|


h3(t). Traits

* Protected function.


h2(fn function). <a name='createKinematic.0'></a>createKinematic.0

p(d). Become a Kinematic RigidBody (KinematicActor, KinematicController) based on the arguments.


p(n). **Note** -- User classes that inherit from KinematicActor do not need to call this.


h3. Arguments

|_. Argument|_. Description|
|const Matrix44& __pose__ | Pose of where the Dynamic RigidBody should be.|
|const RigidBodyDescription& __description__ | Additional properties of the RigidBody.|
|Scene* __scene__ | Which scene the RigidBody to exist in. Cannot be NULL.|
|Shape* __shape__ | The Single shape for the RigidBody to use. Cannot be NULL.|


h3(t). Traits

* Protected function.


h2(fn function). <a name='createKinematic.1'></a>createKinematic.1

p(d). Become a Kinematic RigidBody (KinematicActor, KinematicController) based on the arguments.


p(n). **Note** -- User classes that inherit from KinematicActor do not need to call this.


h3. Arguments

|_. Argument|_. Description|
|const Matrix44& __pose__ | Pose of where the Dynamic RigidBody should be.|
|const RigidBodyDescription& __description__ | Additional properties of the RigidBody.|
|Scene* __scene__ | Which scene the RigidBody to exist in. Cannot be NULL.|
|Shape& __shapes__ | The multiple shapes for the RigidBody to use. Cannot be empty.|


h3(t). Traits

* Protected function.


h2(fn function). <a name='createStatic.0'></a>createStatic.0

p(d). Become a Static RigidBody (StaticGeometry) based on the arguments.


p(n). **Note** -- User classes that inherit from StaticGeometry do not need to call this.


h3. Arguments

|_. Argument|_. Description|
|const Matrix44& __pose__ | Pose of where the Dynamic RigidBody should be.|
|const RigidBodyDescription& __description__ | Additional properties of the RigidBody.|
|Scene* __scene__ | Which scene the RigidBody to exist in. Cannot be NULL.|
|Shape* __shape__ | The Single shape for the RigidBody to use. Cannot be NULL.|


h3(t). Traits

* Protected function.


h2(fn function). <a name='createStatic.1'></a>createStatic.1

p(d). Become a Static RigidBody (StaticGeometry) based on the arguments.


p(n). **Note** -- User classes that inherit from StaticGeometry do not need to call this.


h3. Arguments

|_. Argument|_. Description|
|const Matrix44& __pose__ | Pose of where the Dynamic RigidBody should be.|
|const RigidBodyDescription& __description__ | Additional properties of the RigidBody.|
|Scene* __scene__ | Which scene the RigidBody to exist in. Cannot be NULL.|
|Shape& __shapes__ | The multiple shapes for the RigidBody to use. Cannot be empty.|


h3(t). Traits

* Protected function.


h2(fn function). <a name='createTrigger.0'></a>createTrigger.0

p(d). Become a Trigger RigidBody (Volume) based on the arguments.


p(n). **Note** -- User classes that inherit from Volume do not need to call this.


h3. Arguments

|_. Argument|_. Description|
|const Matrix44& __pose__ | Pose of where the Dynamic RigidBody should be.|
|Enums::VolumeCollisionType _colType__ | Collision types (composed with the @|@ (or) operator) of the types of Collisions to report.|
|Scene* __scene__ | Which scene the RigidBody to exist in. Cannot be NULL.|
|Shape& __shapes__ | The multiple shapes for the RigidBody to use. Cannot be empty.|


h3(t). Traits

* Protected function.


h2(fn function). <a name='createTrigger.1'></a>createTrigger.1

p(d). Become a Trigger RigidBody (Volume) based on the arguments.


p(n). **Note** -- User classes that inherit from Volume do not need to call this.


h3. Arguments

|_. Argument|_. Description|
|const Matrix44& __pose__ | Pose of where the Dynamic RigidBody should be.|
|Enums::VolumeCollisionType _colType__ | Collision types (composed with the @|@ (or) operator) of the types of Collisions to report.|
|Scene* __scene__ | Which scene the RigidBody to exist in. Cannot be NULL.|
|Shape& __shapes__ | The multiple shapes for the RigidBody to use. Cannot be empty.|


h3(t). Traits

* Protected function.


h2(fn function). <a name='destroy'></a>destroy

p(d). Destroy the NxActor safely and delete all shapes from mShapes.


p(n). **Note** -- User classes that inherit from Actor, StaticGeometry, KinematicActor, KinematicController or Volume do not need to call this.


h2(fn function). <a name='getContactCallback'></a>getContactCallback

p(d). Get the assigned callback for contact reporting.


p(n). **Note** -- As this contact can be shared between RigidBodies it is upto YOU to delete the callback at the appropriate time.
See the reference functions in callback for more information.


h3. Return

p(r). **Callback** * -- Callback, or NULL if there is none.


h2(fn function). <a name='getNameHash'></a>getNameHash

p(d). Get the hashed name of the RigidBody.


h3. Return

p(r). **StringHash** -- The hash of the name, or *BLANK_HASH* if there is no name.


h2(fn function). <a name='getNxActor'></a>getNxActor

p(d). Get the PhysX *NxActor* that this RigidBody represents.


p(n). **Note** -- Do not delete, or otherwise modify the pointer.


h3. Return

p(r). **NxActor** * -- NxActor instance.


h3(t). Traits

* Use PhysX classes as arguments or as a return value


h2(fn function). <a name='getScene'></a>getScene

p(d). Retrieves the scene which this rigid body belongs to.
return
**Scene** * -- Scene that this RigidBody belongs to.


h2(fn function). <a name='getType'></a>getType

p(d). Get the numerical type (see Enums::RigidBodyType) of this RigidBody; for casting purposes.


p(n). **Note** -- This function is not to be confused with getClassType - which although similar in function is different.


h3. Return

p(r). **unsigned int** -- The class type either from Enums::RigidBodyType, or one from the users app.


h2(fn function). <a name='isDynamic'></a>isDynamic

p(d). Returns true if the RigidBody is dynamic, i.e. Had a NxBodyDesc when creating; such as a KinematicActor, Actor or Actor based class.


h3. Return

p(r). **bool** -- If the Actor is dynamic or not.


h2(fn function). <a name='setContactCallback'></a>setContactCallback

p(d). Set a callback for contact reporting. If there is a previous callback, it won't be deleted.


p(n). **Note** -- As this contact can be shared between RigidBodies it is upto YOU to delete the callback at the appropriate time.
See the reference functions in callback for more information.


h3. Arguments

|_. Argument|_. Description|
|Callback* __callback__ | New callback to set, or NULL to clear.|


