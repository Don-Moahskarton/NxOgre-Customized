p(d). Uses Files as Resources and Directories as Archives. Platform independent.


h3(e). Example

bc..  // Open or create an archive (which will be named media) from the following path, then open the file named "mesh.nxs"
 // and represent it as a Resource.
 Resource* resource = ResourceSystem::getSingleton()->open("file://c:/Program Files/myGame/media/mesh.nxs");


p. &nbsp;

h2(fn destructor). <a name='FileResourceProtocol'></a>FileResourceProtocol

h2(fn function). <a name='calculateArchiveName'></a>calculateArchiveName

p(d). Calculates the archive name given by a path

The process of getting the name is;
# Is Relative Path? Has No Directories?  => @current_directory@
# Has Directories? => @path.directory(0)@
# Has No Directories? Has Drive => @path.drive()@
# Otherwise => @file_archive_<random_hex_string>@


h3. Arguments

|_. Argument|_. Description|
|const Path& __path__ | Path to calculate the archive name from|


h3. Return

p(r). **String** -- The archive name.


h2(fn function). <a name='closeArchive'></a>closeArchive

p(d). Close an archive.


h3. Arguments

|_. Argument|_. Description|
|Archive* __archive__ | Archive to close.|


h2(fn function). <a name='getProtocol'></a>getProtocol

p(d). Get the protocol "file"


h3. Return

p(r). **String** -- The protocol, which will be "file".


h2(fn function). <a name='getProtocolHash'></a>getProtocolHash

p(d). Get the protocol hash of "file"


h3. Return

p(r). **String** -- Always "file" run through a hash function.


h2(fn function). <a name='initialise'></a>initialise

p(d). Required initialise function


h2(fn function). <a name='isSingleArchive'></a>isSingleArchive

p(d). Is there only one archive by default?


h3. Return

p(r). **bool** -- Always returns false.


h2(fn function). <a name='openArchive'></a>openArchive

p(d). Open an archive, and parse the contents. An archive being a single folder.


h3. Arguments

|_. Argument|_. Description|
|const String& archive_name | Name of the archive; usually given by FileResourceProtocol::calculateArchiveName|
|const Path& path | Directory path of the archive to represent.|


h3. Return

p(r). **Archive** * -- The opened archive.


h3(e). Example

bc.. ResourceSystem::getSingleton()->openArchive("media", "file://C:/Program Files/myGame/media/");


p. &nbsp;

h2(fn function). <a name='usesNamelessResource'></a>usesNamelessResource

p(d). Does the resources use filenames?
return
**bool** -- Always returns true.


