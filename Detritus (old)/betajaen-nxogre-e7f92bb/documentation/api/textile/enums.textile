h2(enum). <a name='Axis'></a>Axis

p(d). Axis as an integer, semi-compatible with NxHeightFieldAxis and other classes.


h2(enum). <a name='TimerMode'></a>TimerMode

p(d). Current state of the SceneTimer.


h2(enum). <a name='CombineMode'></a>CombineMode

p(d). Combine mode when two integrals meet.


p(n). **Note** -- Compatible with **NxCombineMode**


h2(enum). <a name='ActorFlags'></a>ActorFlags

p(d). Actor flags to use with all types of RigidBodies.


p(n). **Note** -- Compatible with **NxActorFlag**


h2(enum). <a name='BodyFlags'></a>BodyFlags

p(d). Body flags to use with Actor (and inherited) and KinematicActor types of RigidBodies ONLY.


p(n). **Note** -- Compatible with **NxBodyFlag**


h2(enum). <a name='ForceMode'></a>ForceMode

p(d). Force mode for when using addForce in a RigidBody.


p(n). **Note** -- Compatible with **NxForceMode**.


h2(enum). <a name='Priority'></a>Priority

p(d). Priorities are an order of importantance. Which is executed first.


h2(enum). <a name='RigidBodyType'></a>RigidBodyType

p(d). What the RigidBody type is.


h2(enum). <a name='PhysXAssertionResponse'></a>PhysXAssertionResponse

p(d). What do when there is an assertion from PhysX


h2(enum). <a name='PhysXAssertionResponse'></a>PhysXAssertionResponse

p(d). Time stepping method.


h2(enum). <a name='PruningStructure'></a>PruningStructure

p(d). Time stepping method.


p(n). **Note** -- Compatible with **NxPruningStructure**.


h2(enum). <a name='BroadPhase'></a>BroadPhase

p(d). Broadphase type for Scenes.


p(n). **Note** -- Compatible with NxBroadPhaseType


h2(enum). <a name='ResourceDirectionality'></a>ResourceDirectionality

p(d). The directions that a Resource can be read or written to. Omidrectional like a file, or sucessional like a stream.


h2(enum). <a name='ResourceStatus'></a>ResourceStatus

p(d). Status of a resource


h2(enum). <a name='ResourceAccess'></a>ResourceAccess

p(d). Type of access to a resource


h2(enum). <a name='KinematicInteractionFlag'></a>KinematicInteractionFlag

p(d). Kinematic controller interaction flags.


h2(enum). <a name='KinematicCollisionFlag'></a>KinematicCollisionFlag

p(d). Kinematic controller collision flags.


h2(enum). <a name='KinematicContactAction'></a>KinematicContactAction

p(d). Kinematic controller contact action flags.


h2(enum). <a name='ShapesType'></a>ShapesType

p(d). Type of shape filted by restriced movement of parent RigidBody, used with scene queries, and test methods in the Scene


p(n). **Note** -- Compatible with **NxShapesType**.


h2(enum). <a name='SimpleShapeType'></a>SimpleShapeType

p(d). Type of SimpleShape.


h2(enum). <a name='ShapeFunctionType'></a>ShapeFunctionType

p(d). A list of the possible functions of shapes in NxOgre.


p(n). **Note** -- Compatible with **NxShapeType**.


h2(enum). <a name='ShapeFunctionType'></a>ShapeFunctionType

p(d). Describes the compartment types a rigid body shape might interact with.


p(n). **Note** -- Compatible with **NxShapeCompartmentType**.


h2(enum). <a name='ShapeFlags'></a>ShapeFlags

p(d). Flags used when building a shape.


p(n). **Note** -- Mostly Compatible with the **NxShapeFlag** enum.


h2(enum). <a name='MeshType'></a>MeshType

p(d). Type of NxOgre and PhysX Meshes.


h2(enum). <a name='XType'></a>XType

p(d). Type of NxOgre file; xhf or xcl.


h2(enum). <a name='VolumeCollisionType'></a>VolumeCollisionType

p(d). Type of collisions to look for in a Volume.


p(n). **Note** -- VolumeCollisionTypes are combined together with the @|@ (or) operator.


h2(enum). <a name='VolumeCollisionType'></a>VolumeCollisionType

p(d). Type of collisions to look for in a Volume.


p(n). **Note** -- VisualDebugger are combined together with the @|@ (or) operator.


h2(enum). <a name='RenderableType'></a>RenderableType

p(d). Type of Renderables


h2(enum). <a name='MeshShapeFlag'></a>MeshShapeFlag

p(d). Type of Renderables

h4. Smooth Sphere Collisions

p. Select between "normal" or "smooth" sphere-mesh/raycastcapsule-mesh contact generation routines.

p. The 'normal' algorithm assumes that the mesh is composed from flat triangles. When a ball rolls
or a raycast capsule slides along the mesh surface, it will experience small, sudden changes in
velocity as it rolls from one triangle to the next. The smooth algorithm, on the other hand, assumes
that the triangles are just an approximation of a surface that is smooth. It uses the Gouraud algorithm
to smooth the triangles' vertex normals (which in this case are particularly important).
This way the rolling sphere's/capsule's velocity will change smoothly over time, instead of suddenly.
We recommend this algorithm for simulating car wheels on a terrain.



h2(enum). <a name='HeightFieldTesselation'></a>HeightFieldTesselation

p(d). Tesselation mode for Quads in HeightFields


h2(enum). <a name='TerrainCentering'></a>TerrainCentering

p(d). Terrain local pose adjustment - or not.


h2(enum). <a name='RemoteDebuggerEventGroup'></a>RemoteDebuggerEventGroup

p(d). Used with RemoteDebuggerObjects


h2(enum). <a name='RemoteDebuggerMask'></a>RemoteDebuggerMask

p(d). Used to filter out events in the Remote Debugger.


p(n). **Note** -- RemoteDebuggerMasks are combined together with the @|@ (or) operator.


h2(enum). <a name='RemoteDebuggerObjectType'></a>RemoteDebuggerObjectType

p(d). Type of Remote Debugger Object


h2(enum). <a name='JointFunctionType'></a>JointFunctionType

p(d). Type of Joint


p(n). **Note** -- Compatible with **NxJointType**.


h2(enum). <a name='JointState'></a>JointState

p(d). Type of Joint


p(n). **Note** -- Mostly compatible with **NxJointState**. apart from JointState_Dead


h2(enum). <a name='JointFlag'></a>JointFlag

p(d). Flags for Joints


p(n). **Note** -- Compatible with **NxJointFlag**.


h2(enum). <a name='JointProjectionMode'></a>JointProjectionMode

p(d). Joint projection is a method for correcting large joint errors.


p(n). **Note** -- Compatible with **NxJointProjectionMode**.


h2(enum). <a name='RevoluteJointFlags'></a>RevoluteJointFlags

p(d). Control the behavior of revolute joints.


p(n). **Note** -- Compatible with **NxRevoluteJointFlag**.


h2(enum). <a name='PulleyJointFlags'></a>PulleyJointFlags

p(d). Control the behavior of pulley joints.


p(n). **Note** -- Compatible with **NxPulleyJointFlag**.


h2(enum). <a name='DistanceJointFlags'></a>DistanceJointFlags

p(d). Control the behavior of distance joints.


p(n). **Note** -- Compatible with **NxDistanceJointFlag**.


h2(enum). <a name='D6JointMotion'></a>D6JointMotion

p(d). Used to specifiy the range of motions allowed for a DOF in a D6 joint.


p(n). **Note** -- Compatible with **NxD6JointMotion**.


h2(enum). <a name='D6JointMotion'></a>D6JointMotion

p(d). Used to specify a particular drive method. i.e. Having a position based goal or a velocity based goal.


p(n). **Note** -- Compatible with **NxD6JointDriveType**.


h2(enum). <a name='D6JointFlag'></a>D6JointFlag

p(d). Control the general behavior of D6 joints.


p(n). **Note** -- Compatible with **NxD6JointFlag**.


h2(enum). <a name='JointSpringType'></a>JointSpringType

p(d). Joint spring type


h2(enum). <a name='SphericalJointFlags'></a>SphericalJointFlags

p(d). Spherical joint spring type


p(n). **Note** -- Compatible with **NxSphericalJointFlag**.


h2(enum). <a name='WheelFlags'></a>WheelFlags

p(d). Flags to use with Wheels


p(n). **Note** -- Compatible with **NxWheelFlag**.


h2(enum). <a name='ClothFlags'></a>ClothFlags

p(d). Flags to use with Cloth


p(n). **Note** -- Compatible with **NxClothFlag**.


h2(enum). <a name='ClothAttachmentFlags'></a>ClothAttachmentFlags

p(d). Flags to use with Cloth when attaching vertices.


p(n). **Note** -- Compatible with **NxClothAttachmentFlag**.


h2(enum). <a name='ClothVertexAttachmentStatus'></a>ClothVertexAttachmentStatus

p(d). Set of attachment states a vertex can be in.


p(n). **Note** -- Compatible with **NxClothVertexAttachmentStatus**.


h2(enum). <a name='MeshConstructionFlags'></a>MeshConstructionFlags

p(d). Set of flags used when constructing meshes.


h2(enum). <a name='SoftBodyFlags'></a>SoftBodyFlags

p(d). Set of flags used when constructing softbodies.


h2(enum). <a name='SoftBodyAttachmentFlags'></a>SoftBodyAttachmentFlags

p(d). Set of flags used when attach softbody vertices.


h2(enum). <a name='DeviceCode'></a>DeviceCode

p(d). DeviceCode are used with compartments


p(n). **Note** -- Compatible with **NxDeviceCode**.


h2(enum). <a name='CompartmentType'></a>CompartmentType

p(d). DeviceCode are used with compartments


p(n). **Note** -- Compatible with **NxCompartmentType**.


h2(enum). <a name='CompartmentFlags'></a>CompartmentFlags

p(d). DeviceCode are used with compartments


p(n). **Note** -- Compatible with **NxCompartmentType**.


h2(enum). <a name='ParticleFlags'></a>ParticleFlags

p(d). Particle flags are used to give some additional information about the particles.


p(n). **Note** -- Compatible with **NxParticleFlag**.


h2(enum). <a name='FluidSimulationMethod'></a>FluidSimulationMethod

p(d). Describes the particle simulation method

p. Particles can be treated in two ways: either they are simulated considering
interparticular forces (SPH), or they are simulated independently.
In the latter case (with the simulation method set to FluidSimulationMethod_NoParticleInteraction),
you still get collision between particles and static/dynamic shapes, damping,
acceleration due to gravity, and the user force.


p(n). **Note** -- Compatible with **NxFluidSimulationMethod**.


h2(enum). <a name='FluidCollisionMethod'></a>FluidCollisionMethod

p(d). The NxFluid instance can be selected for collision with both static and dynamic shapes.


p(n). **Note** -- Compatible with **NxFluidCollisionMethod**.


h2(enum). <a name='FluidFlags'></a>FluidFlags

p(d). Flags used with fluids.


p(n). **Note** -- Compatible with **NxFluidFlag**.


h2(enum). <a name='ContactPairFlags'></a>ContactPairFlags

p(d). Flags used for contacts


p(n). **Note** -- Compatible with **NxContactPairFlag**.
ContactPairFlags are combined together with the @|@ (or) operator.


h2(enum). <a name='SweepFlags'></a>SweepFlags

p(d). Flags used for sweep testings


p(n). **Note** -- Compatible with **NxSweepFlags**.
ContactPairFlags are combined together with the @|@ (or) operator.


